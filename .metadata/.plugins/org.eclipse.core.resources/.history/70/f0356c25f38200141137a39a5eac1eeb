package org.citruscircuits.vision;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.JFrame;

import org.citruscircuits.vision.detectors.ColorDetector;
import org.citruscircuits.vision.detectors.ContourDetector;
import org.citruscircuits.vision.detectors.ObjectDetector;
import org.citruscircuits.vision.effects.BleedEffect;
import org.citruscircuits.vision.effects.ImageEffect;
import org.citruscircuits.vision.effects.IteratePixelEffect;
import org.citruscircuits.vision.effects.SelectColorEffect;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;

import com.atul.JavaOpenCV.Imshow;

public class ObjectTracker {
	float currentError;
	Mat frame;
	ImageEffect effect1, effect2;
	ObjectDetector detector;
	VideoCapture cap;
	CapWindowListener wl;
	public class CapWindowListener implements WindowListener
	{
		public boolean open = true;
		@Override
		public void windowActivated(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowClosed(WindowEvent arg0) {
			open = false;
		}

		@Override
		public void windowClosing(WindowEvent arg0) {
			open = false;
		}

		@Override
		public void windowDeactivated(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowDeiconified(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowIconified(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowOpened(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}
		
	}
	public class BrightContrastEffect extends IteratePixelEffect
	{
		private float contrast = 1;
		private int brightness = 0;
		public BrightContrastEffect(float nContrast, int nBrightness) {
			this.contrast = nContrast;
			this.brightness = nBrightness;
		}
		
		@Override
		public double[] processPixel(double[] in, int row, int col) {
			in[0] = Math.min(255, Math.max(0, (in[0] - 127) * contrast + 127));
			in[1] = Math.min(255, Math.max(0, (in[1] - 127) * contrast + 127));
			in[2] = Math.min(255, Math.max(0, (in[2] - 127) * contrast + 127));
//			in[0] *= contrast;
//			in[1] *= contrast;
//			in[2] *= contrast;
			in[0] += brightness;
			in[1] += brightness;
			in[2] += brightness;
			return in;
		}
	}
	public float getError() // Return the error from -1 (Far left) to 1 (Far right)
	{
		return currentError;
	}
	
	public Mat getFrame()
	{
		return frame;
	}
	
	private Mat captureFrame() // Return new frame from camera
	{
		// TODO get frame from camera
		Mat retval = new Mat();
		cap.read(retval);
		return retval;
		//return Highgui.imread("box.jpg", Highgui.CV_LOAD_IMAGE_COLOR);
	}

	private Mat processFrame() {
		//frame = effect1.process(frame);
		//frameProc = effect2.process(frame);
//		Rect obj = detector.findTarget(frameproc);
//		Core.rectangle(frame, obj.br(), obj.tl(), new Scalar(0, 255, 127));
//		if (obj.width * obj.height > 0)
//		{
//			currentError = (obj.x + obj.width / 2) - frame.cols()  / 2;
//		}
//		else
//		{
//			currentError = 0;
//		}
//		System.out.println(currentError);
		return frame;
	}
	
	public void start(Imshow imshow) {
		cap = new VideoCapture(0);
		wl = new CapWindowListener();
		//effect1 = new SelectColorEffect(0, 30, 100, 255, 127, 255, 150, 179);
		//effect1 = new SelectColorEffect(60, 200, 0, 30, 10, 45);
		//effect1 = new SelectColorEffect(22, 35, 100, 255, 200, 255);
		//effect1 = new SelectColorEffect(100, 115, 190, 255, 200, 255);
		effect1 = new BrightContrastEffect(2F, 50);
		//detector = new ContourDetector();
		//imshow.setCloseOption(JFrame.EXIT_ON_CLOSE);
		while (true)
		{
			frame = captureFrame();
			frame = processFrame();
			imshow.showImage(frame);
		}
		//System.out.println("reached");
	}
	
	public ObjectTracker() {
		Mat frame;
		currentError = 0;
	}

}
