package org.citruscircuits.vision.effects;

import java.util.Vector;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

public class SelectColorEffect extends ImageEffect {
	float[][] HSV = {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
	public static Mat dilateErodeElement = Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(5, 5));
	public static Scalar lrange1, lrange2, hrange1, hrange2;
	public Scalar target;
	public float variance;
	public static Mat addMats(Mat a, Mat b) {
		if (!(a.rows() == b.rows() && a.cols() == b.cols()))
			return null;
		Mat c = Mat.zeros(a.rows(), a.cols(), a.type());
		for (int row = 0; row < a.rows(); row++ ) {
	        for(int col = 0; col < a.cols(); col++ ) {
	        	double[] pix = a.get(row, col);
	        	for (int i = 0; i < a.channels(); i++) {
		        	pix[i] += b.get(row, col)[i];
	        	}
	            c.put(row, col, pix);
	        }
	    }
		return c;
	}
	
	public SelectColorEffect(float r, float g, float b, float vari) {
		variance = vari;
		Mat s = new Mat(1, 1, CvType.CV_8UC3, new Scalar(b, g, r));
		Imgproc.cvtColor(s, s, Imgproc.COLOR_BGR2Lab);
		target = new Scalar(s.get(0, 0));
	}
	
	@Override
	public Mat process(Mat original) {
		// TODO Use LAB colorspace
		//Imgproc.cvtColor(original, original, Imgproc.COLOR_BGR2Lab);
//		Core.inRange(original, new Scalar(HSV[0][0], HSV[1][0], HSV[2][0]), new Scalar(HSV[0][1], HSV[1][1], HSV[2][1]), originala);
		Imgproc.cvtColor(original, original, Imgproc.COLOR_BGR2Lab);
		original = deltaE(original, target);
//		Imgproc.blur(original, original, new Size(20, 20));
//		Imgproc.erode(original, original, dilateErodeElement);
//		Imgproc.erode(original, original, dilateErodeElement);
//		Imgproc.dilate(original, original, dilateErodeElement);
//		Imgproc.dilate(original, original, dilateErodeElement);
//		Imgproc.threshold(original, original, 32, 255, original.type());
		return original;
	}

	private Mat deltaE(Mat original, Scalar target2, float allowedVariance) {
		float totVar = 0;
		Mat ret = Mat.zeros(original.size(), CvType.CV_8UC1);
		for (int row = 0; row < original.rows(); row++) {
			for (int col = 0; col < original.cols(); col++) {
				for (int i = 0; i < 3; i++) {
					totVar += Math.pow(target.val[i] - original.get(row, col)[i], 2);
				}
				ret.put(row, col, data)
			}
		}
		return ret;
	}

}
