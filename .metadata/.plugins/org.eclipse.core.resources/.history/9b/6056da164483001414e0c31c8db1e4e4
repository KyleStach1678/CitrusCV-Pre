package org.citruscircuits.vision;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.WindowConstants;

import org.citruscircuits.vision.detectors.ContourDetector;
import org.citruscircuits.vision.detectors.ObjectDetector;
import org.citruscircuits.vision.effects.ImageEffect;
import org.citruscircuits.vision.effects.IteratePixelEffect;
import org.citruscircuits.vision.effects.SelectColorEffect;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;

import com.atul.JavaOpenCV.Imshow;



public class ObjectTracker {
	float currentError;
	Mat frame;
	ImageEffect effect1, effect2;
	ObjectDetector detector;
	VideoCapture cap;
	
	public class CVWindowListener implements WindowListener {

		@Override
		public void windowActivated(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowClosed(WindowEvent arg0) {
			System.out.println("CLOSE");
		}

		@Override
		public void windowClosing(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowDeactivated(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowDeiconified(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowIconified(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowOpened(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}
		
	}
	
	public static BufferedImage toBufferedImage(Mat m) {
		int type = BufferedImage.TYPE_BYTE_GRAY;
		if (m.channels() > 1) {
			type = BufferedImage.TYPE_3BYTE_BGR;
		}
		int bufferSize = m.channels() * m.cols() * m.rows();
		byte[] b = new byte[bufferSize];
		m.get(0, 0, b); // get all the pixels
		BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
		final byte[] targetPixels = ((DataBufferByte) image.getRaster()
				.getDataBuffer()).getData();
		System.arraycopy(b, 0, targetPixels, 0, b.length);
		return image;

	}
	
	public static void ShowImage(Mat img, JFrame jf) {
		System.out.printf("%d %d\n", img.rows(), img.cols());
		BufferedImage bufImage = null;
		try {
			// InputStream in = new ByteArrayInputStream(byteArray);
			// bufImage = ImageIO.read(in);
			jf.removeAll();
			bufImage = toBufferedImage(img);
			JLabel lab = new JLabel();
			lab.setIcon(new ImageIcon(bufImage));
			jf.add(lab);
			jf.pack();
			jf.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public class BrightContrastEffect extends IteratePixelEffect
	{
		private float contrast = 1;
		private int brightness = 0;
		public BrightContrastEffect(float nContrast, int nBrightness) {
			this.contrast = nContrast;
			this.brightness = nBrightness;
		}
		
		@Override
		public double[] processPixel(double[] in, int row, int col) {
			in[0] = Math.min(255, Math.max(0, (in[0] - 127) * contrast + 127));
			in[1] = Math.min(255, Math.max(0, (in[1] - 127) * contrast + 127));
			in[2] = Math.min(255, Math.max(0, (in[2] - 127) * contrast + 127));
//			in[0] *= contrast;
//			in[1] *= contrast;
//			in[2] *= contrast;
			in[0] += brightness;
			in[1] += brightness;
			in[2] += brightness;
			return in;
		}
	}
	public float getError() // Return the error from -1 (Far left) to 1 (Far right)
	{
		return currentError;
	}
	
	public Mat getFrame()
	{
		return frame;
	}
	
	private Mat captureFrame() // Return new frame from camera
	{
		// TODO get frame from camera
		Mat retval = new Mat();
		cap.read(retval);
		return retval;
		//return Highgui.imread("box.jpg", Highgui.CV_LOAD_IMAGE_COLOR);
	}

	private Mat processFrame() {
		Mat frameproc = effect1.process(frame);
		Rect obj = detector.findTarget(frameproc);
		Core.rectangle(frame, obj.br(), obj.tl(), new Scalar(0, 255, 127));
		if (obj.width * obj.height > 0)
		{
			currentError = (obj.x + obj.width / 2) - frame.cols()  / 2;
		}
		else
		{
			currentError = 0;
		}
		System.out.println(currentError);
		return frame;
	}
	
	public void start() {
		cap = new VideoCapture(0);
		effect1 = new SelectColorEffect(0, 30, 100, 255, 127, 255, 150, 179);
		
		CVWindowListener wl = new CVWindowListener();
		JFrame t = new JFrame();
		t.setVisible(true);
		t.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		t.addWindowListener(wl);

		detector = new ContourDetector();
		while(true)
		{
			frame = captureFrame();
			frame = processFrame();
			ShowImage(frame, t);
			System.gc(); // Java GC was not being called at good intervals
		}
	}
	
	public ObjectTracker() {
		Mat frame;
		currentError = 0;
	}

}
