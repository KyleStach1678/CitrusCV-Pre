package org.citruscircuits.vision.effects;

import org.opencv.core.*;
import org.opencv.imgproc.Imgproc;

public class BleedEffect extends IteratePixelEffect {
	Mat bright;
	float intensity = 1;
	float blurSize = 0;
	public static Mat addMats(Mat a, Mat b) {
		if (!(a.rows() == b.rows() && a.cols() == b.cols()))
			return null;
		Mat c = Mat.zeros(a.rows(), a.cols(), a.type());
		for (int row = 0; row < a.rows(); row++ ) {
	        for(int col = 0; col < a.cols(); col++ ) {
	        	double[] pix = a.get(row, col);
	        	for (int i = 0; i < a.depth(); i++) {
		        	pix[i] += b.get(row, col)[i];
	        	}
	            c.put(row, col, pix);
	        }
	    }
		return c;
	}
	public static Mat multiplyMat(Mat a, float b) {
		Mat c = Mat.zeros(a.rows(), a.cols(), a.type());
		for (int row = 0; row < a.rows(); row++ ) {
	        for(int col = 0; col < a.cols(); col++ ) {
	        	double[] pix = a.get(row, col);
	        	for (int i = 0; i < a.depth(); i++) {
		        	pix[i] *= b;
	        	}
	            c.put(row, col, pix);
	        }
	    }
		return c;
	}
	
	public BleedEffect(float intensity, float blurSize)
	{
		this.intensity = intensity;
		this.blurSize = blurSize;
	}
	
	@Override
	public Mat process(Mat original) {
		bright = Mat.zeros(original.size(), original.type());
		super.process(original);
		Imgproc.blur(bright, bright, new Size(blurSize, blurSize));
		return addMats(multiplyMat(bright, intensity), original);
	}

	@Override
	public double[] processPixel(double[] in, int row, int col, int depth) {
		double[] ret = in.clone();
		int val = 0;
		for (int i = 0; i < depth; i++) {
			val += in[i];
		}
		val /= depth;
		if (val > 192) {
			for (int i = 0; i < depth; i++) {
				in[i] -= 128;
			}
			bright.put(row, col, in);
		}
		return ret;
	}

}
