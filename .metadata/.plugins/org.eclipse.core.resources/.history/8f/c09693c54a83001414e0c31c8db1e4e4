package org.citruscircuits.vision;

import org.citruscircuits.vision.detectors.ContourDetector;
import org.citruscircuits.vision.detectors.ObjectDetector;
import org.citruscircuits.vision.effects.ImageEffect;
import org.citruscircuits.vision.effects.IteratePixelEffect;
import org.citruscircuits.vision.effects.SelectColorEffect;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.highgui.VideoCapture;


public class ObjectTracker {
	float currentError;
	Mat frame;
	ImageEffect effect1, effect2;
	ObjectDetector detector;
	VideoCapture cap;
	
	public class BrightContrastEffect extends IteratePixelEffect
	{
		private float contrast = 1;
		private int brightness = 0;
		public BrightContrastEffect(float nContrast, int nBrightness) {
			this.contrast = nContrast;
			this.brightness = nBrightness;
		}
		
		@Override
		public double[] processPixel(double[] in, int row, int col) {
			in[0] = Math.min(255, Math.max(0, (in[0] - 127) * contrast + 127));
			in[1] = Math.min(255, Math.max(0, (in[1] - 127) * contrast + 127));
			in[2] = Math.min(255, Math.max(0, (in[2] - 127) * contrast + 127));
//			in[0] *= contrast;
//			in[1] *= contrast;
//			in[2] *= contrast;
			in[0] += brightness;
			in[1] += brightness;
			in[2] += brightness;
			return in;
		}
	}
	public float getError() // Return the error from -1 (Far left) to 1 (Far right)
	{
		return currentError;
	}
	
	public Mat getFrame()
	{
		return frame;
	}
	
	private Mat captureFrame() // Return new frame from camera
	{
		// TODO get frame from camera
		Mat retval = new Mat();
		cap.open(0);
		cap.read(retval);
		cap.release();
		return retval;
		//return Highgui.imread("box.jpg", Highgui.CV_LOAD_IMAGE_COLOR);
	}

	private Mat processFrame() {
		Mat frameproc = effect1.process(frame);
		Rect obj = detector.findTarget(frameproc);
		Core.rectangle(frame, obj.br(), obj.tl(), new Scalar(0, 255, 127));
		if (obj.width * obj.height > 0)
		{
			currentError = (obj.x + obj.width / 2) - frame.cols()  / 2;
		}
		else
		{
			currentError = 0;
		}
		System.out.println(currentError);
		return frame;
	}
	
	public void closeCap() {
		cap.release();
	}
	
	public void start() {
		cap = new VideoCapture(0);
		effect1 = new SelectColorEffect(0, 30, 100, 255, 127, 255, 150, 179);
		detector = new ContourDetector();
	}
	
	public void update() {
		frame = captureFrame();
		frame = processFrame();
		System.gc(); // Java GC was not being called at good intervals
	}
	
	public ObjectTracker() {
		currentError = 0;
	}

}
