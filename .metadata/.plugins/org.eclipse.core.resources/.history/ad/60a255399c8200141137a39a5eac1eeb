package org.citruscircuits.vision.effects;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

public class SelectColorEffect extends ImageEffect {
	public static Mat addMats(Mat a, Mat b, int depth) {
		if (!(a.rows() == b.rows() && a.cols() == b.cols()))
			return null;
		Mat c = Mat.zeros(a.rows(), a.cols(), a.type());
		for (int row = 0; row < a.rows(); row++ ) {
	        for(int col = 0; col < a.cols(); col++ ) {
	        	double[] pix = a.get(row, col);
	        	for (int i = 0; i < depth; i++) {
		        	pix[i] += b.get(row, col)[i];
	        	}
	            c.put(row, col, pix);
	        }
	    }
		return c;
	}
	public static Mat addMats(Mat a, Mat b) { return addMats(a, b, 3); }
	@Override
	public Mat process(Mat original) {
		Imgproc.cvtColor(original, original, Imgproc.COLOR_BGR2HSV);
		Mat originala = original.clone(), originalb = original.clone();
		Core.inRange(original, new Scalar(0, 127, 127), new Scalar(30, 255, 255), originala);
		Core.inRange(original, new Scalar(150, 127, 127), new Scalar(179, 255, 255), originalb);
		original = addMats(originala, originalb, 1);
		Imgproc.blur(original, original, new Size(10, 10));
		Imgproc.dilate(original, original, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(10, 10)));
		Imgproc.erode(original, original, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(10, 10)));
		Imgproc.threshold(original, original, 1, 255, original.type());
		return original;
	}

}
